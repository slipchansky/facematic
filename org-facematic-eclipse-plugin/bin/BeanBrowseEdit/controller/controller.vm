package ${controllerPackageName};

import java.util.List;

import javax.inject.Inject;
import org.apache.log4j.Logger;
import org.facematic.core.logging.LoggerFactory;
import org.facematic.core.annotations.FmController;
import org.facematic.core.annotations.FmUI;
import org.facematic.core.annotations.FmView;
import org.facematic.core.annotations.FmReaction;
import org.facematic.core.annotations.FmViewComponent;
import org.facematic.core.mvc.FmBaseController;
import org.facematic.core.producer.FaceProducer;
import org.facematic.core.ui.FacematicUI;
import org.facematic.utils.FacematicBeanUtils;
import org.facematic.utils.FacematicUtils;
import ${className};

import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Component;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Table;
import ${editFormQualifiedName};
import ${createFormQualifiedName};


@FmView(name = "${browserViewQualifiedName}")
public class ${controllerSimpleName} implements FmBaseController {

	private static final Logger logger = LoggerFactory.getLogger(${controllerSimpleName}.class);
	
	//@Inject
	//TheBeanFacade  facade;

    @Inject	
    @FmUI
    FacematicUI ui;

    @FmViewComponent(name="tsOverlay")
    TabSheet tsOverlay;

    @FmViewComponent(name="vlTable")
    VerticalLayout vlTable;

    @FmViewComponent(name="table")
    Table table;

    @FmViewComponent(name="view")
    VerticalLayout view;
    
    @FmController(name="editForm")
    ${editFormSimpleName} editForm;

    @FmController(name="createForm")
    ${createFormSimpleName} createForm;
    
    
    private BeanItemContainer<${classSimpleName}> data;
	
    @Override
	public void prepareContext(FaceProducer producer) {
	}
	
    @Override
    public void init () {
       if (table == null) {
         return;
       }
       
       table.setEnabled(true);
       table.setSelectable(true);
       table.setNullSelectionAllowed(false);
       
       table.addValueChangeListener(new Property.ValueChangeListener() {
			@Override
			public void valueChange(Property.ValueChangeEvent event) {
			    editForm.bind ((${classSimpleName})event.getProperty().getValue());
			}
		});
       List selection = retrieve ();
   	   data = new BeanItemContainer<${classSimpleName}>(${classSimpleName}.class, selection);
   	   FacematicUtils.setTableDatasource(table, data);
    }
    

	public void create(${classSimpleName} bean) {
		// if (facade != null) {
		//     bean = facade.createTheBean (bean);
		// }
		data.addBean(bean);
		table.select(bean);
		tsOverlay.setSelectedTab(vlTable);
		
	}
	
    private List<${classSimpleName}> retrieve() {
    	List<${classSimpleName}>  selection = null;
    	//	if (facade != null) {
    	//		selection = facade.retrieveTheBean (); 
    	//	} else
			
    	selection = FacematicBeanUtils.getFakeDataList(${classSimpleName}.class, 10);
    	return selection;
	}
	

	public void update(${classSimpleName} bean) {
		// if (facade != null) {
		//   bean = facade.updateTheBean (bean);
	    //  }
		
	    tsOverlay.setSelectedTab(vlTable);
		
	}
	
	public void delete (${classSimpleName} bean) {
		// if (facade != null) {
		//   facade.deleteTheBean (bean);
	    //  }
		data.removeItem(bean);
	    tsOverlay.setSelectedTab(vlTable);
	}
	
}

