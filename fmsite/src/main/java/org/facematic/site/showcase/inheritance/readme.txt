[h1]Введение[/h1]
Механизмы, описанные в примере Composite дают возможность многократно использовать однажды созданные элементы интерфейса, 
но в чистом виде, использование этих механизмов существенно ограничено шаблонностью созданных элементов. 
Так, если вы однажды, например, создали универсальный набор механизмов управления набором даннх (CRUD), 
вы, скорее всего не сможете слепо воспроизводить его по отношению к различным по структуре и смыслу данным.
Меняются наборы свойств управляемых объектов, в конце концов разные данные должны быть по-разному подписаны.
Для того, чтобы снять эти ограничения (или в значительной степени избавиться от их влияния), acematic предлагает 
механизмы наследования. В настоящий момент (версия 2.3.0) реализована часть этих механизмов, а именно, механизмы создания расширений и подстановок.
Не реализованы механизмы доопределения(настройки) и переопределения, но по опыту, это несущественно.

Расширения facematic создаются путем использования всего трех инструментов subst, placeholder, implement и extension.

[h2]subst[/h2]
subst - это инструмент для выполнения текстовых подстановок. subst реализуется следующим образом.

1. В описании базового контента (того, который планируется многократно наследовать с уточнением отдельных элементов) 
вы делаете velocity - вставки вида ${substVariableName}.

2. При описании расширения базового контента вы заявляете фактические значения для замены этих вставок:
   <subst name="substVariableName">Substitution Concrete Value</subst>
   или
   <subst name="substVariableName" value="Substitution Concrete Value" />
  


[h2]placeholder[/h2]
placeholder - это именованный тег, фиксирующий место в разметке базового контента, в которое в последствии можно добавлять элементы, не реализованные в базовом контенте.

Декларирование placehoder в рамках контента имеет вид:

<content ...>
   ...
   <Button ... />
   ...  
   [font color="darkred"]<placeholder name="someContentExtensionPoint" />[/font]
   ...
   <Html>...</Html>
</content>
Размещение элементов в позицию placeholder в наследнике описывается конструкцией implement

[h2]implement[/h2]
Конструкция implement имеет вид:

<implement placeholder="someContentExtensionPoint">
    ...
    <composite ... />
    ...
    <Button ... />
    ...
</implement>



[h2]extension[/h2]

extension - полностью наследует свойства content, но имеет одно существенное отличие. XML - тег extension требует указания обязательного атрибута "base", значение которого 
должно соответствовать квалифицированному имени разметки контента, который мы расширяем данным extension. Во всем остальном extension - это такой же контент, 
включая право иметь собственный контроллер, идентичный контенту набор атрибутов и вложенных элементов.

Например:

1. Мы создали базовый контент, предполагающий наследование:
 org/facematic/content/BaseContent.xml

 <content ... controller="org.facematic.content.BaseContent.BaseContent">
   ...${someSubst} ...
   ...
   <placeholder name="somePlaceholder" />
 </content>


2. Мы наследуем и расширяем базовый контент:
org/facematic/content/ExtendedContent.xml

 <extension ... base="org/facematic/content/BaseContent.xml">
   <subst name="someSubst">Some Value</subst>
   
   <implement placeholder="somePlaceholder" >
     ...
     <Button caption="OK" />
     ...
     <Button caption="Cancel" />
     ...
   </implement>
   
 </content>

     
[h1]Многоуровневое наследование.[/h1]
extension поддерживает многоуровневое наследование, то есть, вы можете иметь иерархию контентов описанных разметками:

Base.xml
<condent ... />

ExtLevel1.xml
<extension base="Base.xml" ... />

ExtLevel2.xml
<extension base="ExtLevel1.xml" ... />

и т.д.

При этом implementation будут применяться последовательно в по цепочке наследования от базового контента 
к последнему наследнику (сначала применятся implementation базового контента, потом первого наследника, потом второго и т.д.), 
а подстановки - наоборот - от последнего наследника по цепочке наследования к базовому контенту 
(заявленные нижних уровнях наследования подстановки имеют более высокий приоритет, чем подстановки в верхних уровнях цепочки наследования).
Таким образом, сочетая механизмы расширения facematic механизм с наследованием классов контроллеров можно, например добавлять от уровня 
к уровню наследования дополнительные поля ввода для редактирования специфических атрибутов таким же образом унаследованных бинов, при этом, 
подписывая поля ввода текстами, соответствующими смысловому назначению этих полей на каждом уровне наследования.   
 
 
[h1]Комментарии к примеру.[/h1]

Пример показывает трехуровневое наследование контента:

org.facematic.site.showcase.inheritance.InheritanceExampleSuper описывает базовый контент, 
- требует определить подстановку caption для TextField: ${firstInputCaption}
- создает точку расширени <placeholder name="moreInputs" />
- определяет подстановку  ${firstInputCaption} значением First

расширение org.facematic.site.showcase.inheritance.InheritanceExampleMiddle наследует базовый контент,
- расширяет placeholder moreInputs добавляя текстовое поле с подписью Middle-1
- переопределяет подстановку  ${firstInputCaption} значением Middle

расширение org.facematic.site.showcase.inheritance.InheritanceExample наследует расширение org.facematic.site.showcase.inheritance.InheritanceExampleMiddle,
- расширяет placeholder moreInputs добавляя текстовое поле с подписью Descendant-1 и TextArea с подписью Descendant-2 
- переопределяет подстановку  ${firstInputCaption} значением Descendant-First

